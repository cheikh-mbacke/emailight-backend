services:
  # ================================
  # INFRASTRUCTURE
  # ================================

  mongodb:
    image: mongo:7.0
    container_name: emailight-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_APP_USERNAME: ${MONGO_APP_USERNAME}
      MONGO_APP_PASSWORD: ${MONGO_APP_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - emailight-network
    # No external ports in production - only internal network access
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7.2-alpine
    container_name: emailight-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - emailight-network
    # No external ports in production - only internal network access
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # EXCEPTIONLESS - ERROR MONITORING
  # ================================

  exceptionless:
    image: exceptionless/exceptionless:latest
    container_name: emailight-exceptionless-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:5000:8080" # Only accessible from localhost
    volumes:
      - exceptionless_storage:/app/storage
    networks:
      - emailight-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # ================================
  # MICROSERVICES
  # ================================

  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: emailight-user-service-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3001" # Only accessible from localhost (Nginx proxy)
    environment:
      NODE_ENV: production
      USER_SERVICE_PORT: 3001
      HOST: 0.0.0.0

      # MongoDB
      MONGODB_URI: mongodb://${MONGO_APP_USERNAME}:${MONGO_APP_PASSWORD}@mongodb:27017/${MONGO_DATABASE}

      # JWT & Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}

      # Gmail OAuth
      GMAIL_CLIENT_ID: ${GMAIL_CLIENT_ID}
      GMAIL_CLIENT_SECRET: ${GMAIL_CLIENT_SECRET}
      GMAIL_REDIRECT_URI: ${GMAIL_REDIRECT_URI}

      # Rate Limiting (stricter in production)
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0

      # Logging (less verbose in production)
      ENABLE_LOGGING: ${ENABLE_LOGGING}
      LOG_LEVEL: ${LOG_LEVEL}
      VERBOSE_LOGS: ${VERBOSE_LOGS}

      # Exceptionless
      USER_SERVICE_EXCEPTIONLESS_API_KEY: ${USER_SERVICE_EXCEPTIONLESS_API_KEY}
      USER_SERVICE_EXCEPTIONLESS_SERVER_URL: ${USER_SERVICE_EXCEPTIONLESS_SERVER_URL}

      # Localisation
      LOCALE: ${LOCALE}
      TIMEZONE: ${TIMEZONE}

      # CORS Configuration for production
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}

      # SMTP Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_ENCRYPTION: ${SMTP_ENCRYPTION}

      # Upload Configuration
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE}
      UPLOAD_ALLOWED_TYPES: ${UPLOAD_ALLOWED_TYPES}

      # Token Refresh
      TOKEN_REFRESH_INTERVAL_MINUTES: ${TOKEN_REFRESH_INTERVAL_MINUTES}
      TOKEN_REFRESH_THRESHOLD_MINUTES: ${TOKEN_REFRESH_THRESHOLD_MINUTES}

    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      exceptionless:
        condition: service_healthy

    volumes:
      # Logs persistants
      - user_service_logs:/usr/src/app/logs
      # Uploads persistants
      - user_uploads:/usr/src/app/uploads

    networks:
      - emailight-network

    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# ====================
# VOLUMES PERSISTANTS
# ====================
volumes:
  mongodb_data:
    driver: local
    labels:
      - emailight
      - production
  redis_data:
    driver: local
    labels:
      - emailight
      - production
  exceptionless_storage:
    driver: local
    labels:
      - emailight
      - production
  user_service_logs:
    driver: local
    labels:
      - emailight
      - production
  user_uploads:
    driver: local
    labels:
      - emailight
      - production

# ====================
# RÃ‰SEAU DU PROJET
# ====================
networks:
  emailight-network:
    name: emailight-network-prod
    driver: bridge
    labels:
      - emailight
      - production
