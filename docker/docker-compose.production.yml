services:
  # ================================
  # BASE DE DONNEES
  # ================================
  mongodb:
    image: mongo:7.0
    container_name: emailight-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_APP_USERNAME: ${MONGO_APP_USERNAME}
      MONGO_APP_PASSWORD: ${MONGO_APP_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - emailight-network

  # ================================
  # CACHE REDIS
  # ================================
  redis:
    image: redis:7.2-alpine
    container_name: emailight-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - emailight-network

  # ================================
  # MONITORING EXCEPTIONLESS
  # ================================
  exceptionless:
    image: exceptionless/exceptionless:latest
    container_name: emailight-exceptionless
    restart: always
    environment:
      EX_AppMode: Production
      EX_ConnectionStrings__Storage: provider=folder;path=/app/storage/
      EX_RunJobsInProcess: 'true'
    ports:
      - "8080:8080"
    volumes:
      - exceptionless_storage:/app/storage
    networks:
      - emailight-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # SERVICE UTILISATEUR (PRODUCTION)
  # ================================
  user-service:
    # Image sera remplacee dynamiquement par le workflow CI/CD
    image: ghcr.io/cheikh-mbacke/emailight-backend:latest
    container_name: emailight-user-service
    restart: always
    ports:
      - "${USER_SERVICE_PORT:-3001}:3001"
    environment:
      NODE_ENV: production
      HOST: 0.0.0.0
      USER_SERVICE_PORT: 3001
      
      # Base de donnees
      MONGODB_URI: mongodb://${MONGO_APP_USERNAME}:${MONGO_APP_PASSWORD}@mongodb:27017/${MONGO_DATABASE}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Securite
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # OAuth Google
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      
      # OAuth Gmail
      GMAIL_CLIENT_ID: ${GMAIL_CLIENT_ID}
      GMAIL_CLIENT_SECRET: ${GMAIL_CLIENT_SECRET}
      GMAIL_REDIRECT_URI: ${GMAIL_REDIRECT_URI}
      
      # Rate Limiting
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW}
      
      # Logging
      ENABLE_LOGGING: ${ENABLE_LOGGING}
      LOG_LEVEL: ${LOG_LEVEL}
      VERBOSE_LOGS: ${VERBOSE_LOGS}
      
      # Monitoring
      USER_SERVICE_EXCEPTIONLESS_API_KEY: ${USER_SERVICE_EXCEPTIONLESS_API_KEY}
      USER_SERVICE_EXCEPTIONLESS_SERVER_URL: ${USER_SERVICE_EXCEPTIONLESS_SERVER_URL}
      
      # Application
      APP_NAME: ${APP_NAME}
      APP_BASE_URL: ${APP_BASE_URL}
      SUPPORT_EMAIL: ${SUPPORT_EMAIL}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      
      # Localisation
      LOCALE: ${LOCALE}
      TIMEZONE: ${TIMEZONE}
      
      # SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_ENCRYPTION: ${SMTP_ENCRYPTION}
      
      # Upload
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE}
      UPLOAD_ALLOWED_TYPES: ${UPLOAD_ALLOWED_TYPES}
      
    volumes:
      - user_service_logs:/usr/src/app/logs
      - ./uploads:/usr/src/app/uploads
    depends_on:
      - mongodb
      - redis
      - exceptionless
    networks:
      - emailight-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# ================================
# VOLUMES PERSISTANTS
# ================================
volumes:
  mongodb_data:
    labels:
      - emailight
  redis_data:
    labels:
      - emailight
  user_service_logs:
    labels:
      - emailight
  exceptionless_storage:
    labels:
      - emailight

# ================================
# RESEAU
# ================================
networks:
  emailight-network:
    name: emailight-network
    driver: bridge