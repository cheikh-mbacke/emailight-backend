/**
 * üîê Tests d'int√©gration - Authentification
 */

import { describe, test, expect, beforeAll, afterAll } from "@jest/globals";

// Timeout augment√© pour les tests d'int√©gration
jest.setTimeout(30000);
import {
  makeRequest,
  makeHealthCheck,
  generateTestEmail,
  delay,
} from "../utils/test-helpers.js";
import {
  validateSuccessResponse,
  validateErrorResponse,
  validateRefreshTokenSuccessResponse,
  validateLogoutSuccessResponse,
} from "../utils/validators.js";
import {
  REGISTER_TEST_DATA,
  LOGIN_TEST_DATA,
  EXPECTED_ERROR_MESSAGES,
  EXPECTED_SUCCESS_MESSAGES,
} from "../fixtures/test-data.js";

describe("üîê Tests d'int√©gration - Authentification", () => {
  let testUser = null;

  beforeAll(async () => {
    // V√©rifier que le serveur est accessible
    const healthCheck = await makeHealthCheck();
    expect(healthCheck.statusCode).toBe(200);
  });

  afterAll(async () => {
    // Nettoyage si n√©cessaire
    if (testUser) {
      try {
        await makeRequest(
          "DELETE",
          "/users/me",
          { password: testUser.password },
          {
            Authorization: `Bearer ${testUser.accessToken}`,
          }
        );
      } catch (error) {
        // Ignorer les erreurs de nettoyage
      }
    }
  });

  describe("üìù POST /auth/register", () => {
    test("‚úÖ Inscription valide (FR)", async () => {
      const email = generateTestEmail("register-fr");
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User FR",
          email: email,
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateSuccessResponse(response, "account_created", "FR");
    });

    test("‚úÖ Inscription valide (EN)", async () => {
      const email = generateTestEmail("register-en");
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User EN",
          email: email,
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateSuccessResponse(response, "account_created", "EN");
    });

    test("‚ùå Email d√©j√† utilis√© (FR)", async () => {
      const email = generateTestEmail("duplicate");

      // Cr√©er un utilisateur
      await makeRequest("POST", "/auth/register", {
        name: "First User",
        email: email,
        password: "TestPassword123!",
      });

      // Tenter de cr√©er un autre utilisateur avec le m√™me email
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Second User",
          email: email,
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(response, 409, "USER_EXISTS", null, "FR");
    });

    test("‚ùå Email d√©j√† utilis√© (EN)", async () => {
      const email = generateTestEmail("duplicate-en");

      // Cr√©er un utilisateur
      await makeRequest("POST", "/auth/register", {
        name: "First User",
        email: email,
        password: "TestPassword123!",
      });

      // Tenter de cr√©er un autre utilisateur avec le m√™me email
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Second User",
          email: email,
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(response, 409, "USER_EXISTS", null, "EN");
    });

    test("‚ùå Mot de passe trop court (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          email: generateTestEmail("short-pass"),
          password: "123",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "password_min",
        "FR"
      );
    });

    test("‚ùå Mot de passe trop court (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          email: generateTestEmail("short-pass-en"),
          password: "123",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "password_min",
        "EN"
      );
    });

    test("‚ùå Email invalide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          email: "not-an-email",
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_invalid",
        "FR"
      );
    });

    test("‚ùå Email invalide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          email: "not-an-email",
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_invalid",
        "EN"
      );
    });

    test("‚ùå Nom trop court (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "J",
          email: generateTestEmail("short-name"),
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "name_min",
        "FR"
      );
    });

    test("‚ùå Nom trop court (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "J",
          email: generateTestEmail("short-name-en"),
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "name_min",
        "EN"
      );
    });

    test("‚ùå Nom manquant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          email: generateTestEmail("no-name"),
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "name_required",
        "FR"
      );
    });

    test("‚ùå Nom manquant (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          email: generateTestEmail("no-name-en"),
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "name_required",
        "EN"
      );
    });

    test("‚ùå Email manquant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_required",
        "FR"
      );
    });

    test("‚ùå Email manquant (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_required",
        "EN"
      );
    });

    test("‚ùå Mot de passe manquant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          email: generateTestEmail("no-password"),
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "password_required",
        "FR"
      );
    });

    test("‚ùå Mot de passe manquant (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {
          name: "Test User",
          email: generateTestEmail("no-password-en"),
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "password_required",
        "EN"
      );
    });

    test("‚ùå Corps vide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {},
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "name_required",
        "FR"
      );
    });

    test("‚ùå Corps vide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/register",
        {},
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "name_required",
        "EN"
      );
    });
  });

  describe("üîë POST /auth/login", () => {
    beforeAll(async () => {
      // Cr√©er un utilisateur pour les tests de connexion
      const email = generateTestEmail("login-test");
      const response = await makeRequest("POST", "/auth/register", {
        name: "Login Test User",
        email: email,
        password: "TestPassword123!",
      });

      testUser = {
        email: email,
        password: "TestPassword123!",
        accessToken: response.body.data.accessToken,
        refreshToken: response.body.data.refreshToken,
      };
    });

    test("‚úÖ Connexion valide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: testUser.email,
          password: testUser.password,
        },
        { "Accept-Language": "fr-FR" }
      );

      validateSuccessResponse(response, "login_success", "FR");
    });

    test("‚úÖ Connexion valide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: testUser.email,
          password: testUser.password,
        },
        { "Accept-Language": "en-US" }
      );

      validateSuccessResponse(response, "login_success", "EN");
    });

    test("‚ùå Email inexistant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: "inexistant@emailight.com",
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(response, 401, "INVALID_CREDENTIALS", null, "FR");
    });

    test("‚ùå Email inexistant (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: "inexistant@emailight.com",
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(response, 401, "INVALID_CREDENTIALS", null, "EN");
    });

    test("‚ùå Mot de passe incorrect (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: testUser.email,
          password: "WrongPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(response, 401, "INVALID_CREDENTIALS", null, "FR");
    });

    test("‚ùå Mot de passe incorrect (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: testUser.email,
          password: "WrongPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(response, 401, "INVALID_CREDENTIALS", null, "EN");
    });

    test("‚ùå Email manquant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_required",
        "FR"
      );
    });

    test("‚ùå Email manquant (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_required",
        "EN"
      );
    });

    test("‚ùå Mot de passe manquant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: testUser.email,
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "password_required",
        "FR"
      );
    });

    test("‚ùå Mot de passe manquant (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: testUser.email,
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "password_required",
        "EN"
      );
    });

    test("‚ùå Email invalide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: "not-an-email",
          password: "TestPassword123!",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_invalid",
        "FR"
      );
    });

    test("‚ùå Email invalide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {
          email: "not-an-email",
          password: "TestPassword123!",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_invalid",
        "EN"
      );
    });

    test("‚ùå Corps vide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {},
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_required",
        "FR"
      );
    });

    test("‚ùå Corps vide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/login",
        {},
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "email_required",
        "EN"
      );
    });
  });

  describe("üîÑ POST /auth/refresh-token", () => {
    test("‚úÖ Token valide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: testUser.refreshToken,
        },
        { "Accept-Language": "fr-FR" }
      );

      validateRefreshTokenSuccessResponse(response, "token_refreshed", "FR");
    });

    test("‚úÖ Token valide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: testUser.refreshToken,
        },
        { "Accept-Language": "en-US" }
      );

      validateRefreshTokenSuccessResponse(response, "token_refreshed", "EN");
    });

    test("‚ùå Token manquant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {},
        {
          "Accept-Language": "fr-FR",
        }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "refresh_token_required",
        "FR"
      );
    });

    test("‚ùå Token manquant (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {},
        {
          "Accept-Language": "en-US",
        }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "refresh_token_required",
        "EN"
      );
    });

    test("‚ùå Token vide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: "",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "refresh_token_required",
        "FR"
      );
    });

    test("‚ùå Token vide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: "",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "refresh_token_required",
        "EN"
      );
    });

    test("‚ùå Token invalide/malform√© (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: "abc",
        },
        { "Accept-Language": "fr-FR" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "refresh_token_invalid",
        "FR"
      );
    });

    test("‚ùå Token invalide/malform√© (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: "abc",
        },
        { "Accept-Language": "en-US" }
      );

      validateErrorResponse(
        response,
        400,
        "VALIDATION_ERROR",
        "refresh_token_invalid",
        "EN"
      );
    });

    test("‚ùå Token expir√© (FR)", async () => {
      // Note: Ce test n√©cessiterait un token expir√© r√©el
      // Pour l'instant, on teste avec un token malform√©
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: "expired_token_placeholder",
        },
        { "Accept-Language": "fr-FR" }
      );

      // Codes de statut flexibles : 400 (token malform√©), 401 (token expir√©)
      expect([400, 401]).toContain(response.statusCode);
    });

    test("‚ùå Token expir√© (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/refresh-token",
        {
          refreshToken: "expired_token_placeholder",
        },
        { "Accept-Language": "en-US" }
      );

      expect([400, 401]).toContain(response.statusCode);
    });
  });

  describe("üö™ POST /auth/logout", () => {
    test("‚úÖ Logout valide (FR)", async () => {
      // Cr√©er un utilisateur temporaire pour le test de logout
      const email = generateTestEmail("logout-test");
      const registerResponse = await makeRequest("POST", "/auth/register", {
        name: "Logout Test User",
        email: email,
        password: "TestPassword123!",
      });

      const accessToken = registerResponse.body.data.accessToken;

      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "fr-FR",
        }
      );

      validateLogoutSuccessResponse(response, "logout_success", "FR");
    });

    test("‚úÖ Logout valide (EN)", async () => {
      // Cr√©er un utilisateur temporaire pour le test de logout
      const email = generateTestEmail("logout-test");
      const registerResponse = await makeRequest("POST", "/auth/register", {
        name: "Logout Test User",
        email: email,
        password: "TestPassword123!",
      });

      const accessToken = registerResponse.body.data.accessToken;

      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "en-US",
        }
      );

      validateLogoutSuccessResponse(response, "logout_success", "EN");
    });

    test("‚ùå Token manquant (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          "Accept-Language": "fr-FR",
        }
      );

      validateErrorResponse(response, 401, "MISSING_TOKEN", null, "FR");
    });

    test("‚ùå Token invalide (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: "Bearer abc123",
          "Accept-Language": "fr-FR",
        }
      );

      validateErrorResponse(response, 401, "INVALID_TOKEN", null, "FR");
    });

    test("‚ùå Token invalide (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: "Bearer abc123",
          "Accept-Language": "en-US",
        }
      );

      validateErrorResponse(response, 401, "INVALID_TOKEN", null, "EN");
    });

    test("‚ùå Token expir√© (FR)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: "Bearer expired_token_placeholder",
          "Accept-Language": "fr-FR",
        }
      );

      // Peut √™tre 401 (expir√©) ou 401 (invalide) selon l'impl√©mentation
      expect(response.statusCode).toBe(401);
    });

    test("‚ùå Token expir√© (EN)", async () => {
      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: "Bearer expired_token_placeholder",
          "Accept-Language": "en-US",
        }
      );

      expect(response.statusCode).toBe(401);
    });

    test("‚ùå Token blacklist√© (FR)", async () => {
      // Cr√©er un utilisateur et le logout pour blacklister le token
      const email = generateTestEmail("blacklist-test");
      const registerResponse = await makeRequest("POST", "/auth/register", {
        name: "Blacklist Test User",
        email: email,
        password: "TestPassword123!",
      });

      const accessToken = registerResponse.body.data.accessToken;

      // Logout pour blacklister le token
      await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "fr-FR",
        }
      );

      // Tenter d'utiliser le token blacklist√©
      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "fr-FR",
        }
      );

      validateErrorResponse(response, 401, "TOKEN_REVOKED", null, "FR");
    });

    test("‚ùå Token blacklist√© (EN)", async () => {
      const email = generateTestEmail("blacklist-test-en");
      const registerResponse = await makeRequest("POST", "/auth/register", {
        name: "Blacklist Test User",
        email: email,
        password: "TestPassword123!",
      });

      const accessToken = registerResponse.body.data.accessToken;

      await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "en-US",
        }
      );

      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "en-US",
        }
      );

      validateErrorResponse(response, 401, "TOKEN_REVOKED", null, "EN");
    });

    test("‚ùå Utilisateur supprim√© (FR)", async () => {
      // Cr√©er un utilisateur, le supprimer, puis tenter de logout
      const email = generateTestEmail("deleted-user-test");
      const registerResponse = await makeRequest("POST", "/auth/register", {
        name: "Deleted User Test",
        email: email,
        password: "TestPassword123!",
      });

      const accessToken = registerResponse.body.data.accessToken;

      // Supprimer l'utilisateur
      await makeRequest(
        "DELETE",
        "/users/me",
        { password: "TestPassword123!" },
        {
          Authorization: `Bearer ${accessToken}`,
        }
      );

      // Tenter de logout avec le token d'un utilisateur supprim√©
      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "fr-FR",
        }
      );

      validateErrorResponse(response, 401, "USER_NOT_FOUND", null, "FR");
    });

    test("‚ùå Utilisateur supprim√© (EN)", async () => {
      const email = generateTestEmail("deleted-user-test-en");
      const registerResponse = await makeRequest("POST", "/auth/register", {
        name: "Deleted User Test",
        email: email,
        password: "TestPassword123!",
      });

      const accessToken = registerResponse.body.data.accessToken;

      await makeRequest(
        "DELETE",
        "/users/me",
        { password: "TestPassword123!" },
        {
          Authorization: `Bearer ${accessToken}`,
        }
      );

      const response = await makeRequest(
        "POST",
        "/auth/logout",
        {},
        {
          Authorization: `Bearer ${accessToken}`,
          "Accept-Language": "en-US",
        }
      );

      validateErrorResponse(response, 401, "USER_NOT_FOUND", null, "EN");
    });
  });
});
