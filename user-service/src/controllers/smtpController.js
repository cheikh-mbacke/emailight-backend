// ============================================================================
// üìÅ src/controllers/smtpController.js - Controller SMTP/IMAP COMPLET
// ============================================================================

import SmtpConnectionService from "../services/smtpConnectionService.js";
import EmailAccount from "../models/EmailAccount.js";

/**
 * üìß SMTP Controller
 */
class SmtpController {
  static logger = null;

  /**
   * ‚úÖ Injection du logger
   */
  static setLogger(injectedLogger) {
    this.logger = injectedLogger;
    // Injecter aussi dans le service SMTP
    SmtpConnectionService.setLogger(injectedLogger);
  }

  /**
   * üìß Configurer un compte SMTP
   */
  static async configureSmtpAccount(request, reply) {
    try {
      const userId = request.user._id;
      const smtpConfig = request.body;

      // Ajouter les recommandations de s√©curit√© si disponibles
      if (request.smtpSecurityRecommendations) {
        smtpConfig._securityRecommendations =
          request.smtpSecurityRecommendations;
      }

      const result = await SmtpConnectionService.configureSmtpAccount(
        userId,
        smtpConfig
      );

      this.logger?.user(
        "Compte SMTP configur√© avec succ√®s",
        {
          email: smtpConfig.email,
          provider: result.account.provider,
          smtpHost: smtpConfig.smtp.host,
          hasImap: !!smtpConfig.imap,
          testResults: result.testResults.overallSuccess,
        },
        {
          userId: userId.toString(),
          email: smtpConfig.email,
          action: "smtp_account_configured",
        }
      );

      return reply
        .code(201)
        .success(result, "Compte SMTP configur√© avec succ√®s");
    } catch (error) {
      // üéØ Erreurs m√©tier (4xx) : gestion locale
      if (error.statusCode && error.statusCode < 500 && error.isOperational) {
        return reply.code(error.statusCode).send({
          error: error.message,
          code: error.code || "SMTP_ACCOUNT_CREATION_ERROR",
          details: error.details || null,
        });
      }

      // üö® Erreurs syst√®me (5xx) : laisser remonter au gestionnaire centralis√©
      throw error;
    }
  }

  /**
   * üß™ Tester une configuration SMTP
   */
  static async testSmtpConnection(request, reply) {
    try {
      const smtpConfig = request.body;

      // Validation
      const validation = SmtpConnectionService.validateSmtpConfig(smtpConfig);
      if (!validation.isValid) {
        return reply.code(400).send({
          error: "Configuration SMTP invalide",
          details: validation.errors,
          code: "INVALID_SMTP_CONFIG",
        });
      }

      // Tests de connexion
      const smtpTest =
        await SmtpConnectionService.testSmtpConnection(smtpConfig);
      const imapTest =
        await SmtpConnectionService.testImapConnection(smtpConfig);

      const result = {
        smtp: smtpTest,
        imap: imapTest,
        overallSuccess:
          smtpTest.success && (imapTest.skipped || imapTest.success),
        recommendations: [],
        warnings: request.smtpWarnings || [],
      };

      // Ajouter des recommandations
      if (!smtpTest.success) {
        result.recommendations.push(
          "V√©rifiez vos credentials SMTP et les param√®tres du serveur"
        );
      }
      if (imapTest.success === false) {
        result.recommendations.push(
          "IMAP √©chou√© - v√©rifiez la configuration ou d√©sactivez IMAP"
        );
      }
      if (request.smtpWarnings?.length > 0) {
        result.recommendations.push(
          "Consultez les avertissements pour optimiser la configuration"
        );
      }

      this.logger?.info(
        "Test de connexion SMTP effectu√©",
        {
          email: smtpConfig.email,
          smtpSuccess: smtpTest.success,
          imapSuccess: imapTest.success || imapTest.skipped,
          overallSuccess: result.overallSuccess,
          warningsCount: result.warnings.length,
        },
        {
          userId: request.user._id.toString(),
          action: "smtp_connection_tested",
        }
      );

      const message = result.overallSuccess
        ? "Tests de connexion r√©ussis"
        : "Certains tests ont √©chou√©";

      return reply.success(result, message);
    } catch (error) {
      if (error.statusCode && error.statusCode < 500 && error.isOperational) {
        return reply.code(error.statusCode).send({
          error: error.message,
          code: error.code || "SMTP_TEST_ERROR",
          details: error.details || null,
        });
      }
      throw error;
    }
  }

  /**
   * üîß Obtenir les configurations des providers
   */
  static async getProviderConfigurations(request, reply) {
    try {
      const providers = SmtpConnectionService.getProviderConfigurations();

      // Ajouter des informations utiles
      const enrichedProviders = {};

      Object.keys(providers).forEach((providerKey) => {
        const provider = providers[providerKey];
        enrichedProviders[providerKey] = {
          ...provider,
          description: this.getProviderDescription(providerKey),
          setupInstructions: this.getProviderInstructions(providerKey),
          securityNotes: this.getProviderSecurityNotes(providerKey),
        };
      });

      this.logger?.debug(
        "Configurations SMTP providers r√©cup√©r√©es",
        {
          providersCount: Object.keys(enrichedProviders).length,
          providers: Object.keys(enrichedProviders),
        },
        {
          userId: request.user._id.toString(),
          action: "smtp_providers_retrieved",
        }
      );

      return reply.success(
        { providers: enrichedProviders },
        "Configurations SMTP/IMAP r√©cup√©r√©es"
      );
    } catch (error) {
      if (error.statusCode && error.statusCode < 500 && error.isOperational) {
        return reply.code(error.statusCode).send({
          error: error.message,
          code: error.code || "GET_SMTP_PROVIDERS_ERROR",
        });
      }
      throw error;
    }
  }

  /**
   * üîß Mettre √† jour un compte SMTP existant
   */
  static async updateSmtpAccount(request, reply) {
    try {
      const userId = request.user._id;
      const { accountId } = request.params;
      const updates = request.body;

      // V√©rifier que le compte existe et appartient √† l'utilisateur
      const emailAccount = await EmailAccount.findOne({
        _id: accountId,
        userId: userId,
        provider: { $in: ["smtp", "gmail", "outlook", "yahoo", "other"] },
      });

      if (!emailAccount) {
        return reply.code(404).send({
          error: "Compte SMTP introuvable",
          message: "Ce compte SMTP n'existe pas ou ne vous appartient pas",
          code: "SMTP_ACCOUNT_NOT_FOUND",
        });
      }

      // D√©crypter et parser les credentials actuels
      let currentCredentials = {};
      try {
        const credentialsJson = emailAccount.decryptToken(
          emailAccount.accessToken
        );
        currentCredentials = JSON.parse(credentialsJson);
      } catch (error) {
        return reply.code(500).send({
          error: "Erreur de d√©chiffrement",
          message: "Impossible de lire les credentials SMTP actuels",
          code: "SMTP_DECRYPT_ERROR",
        });
      }

      // Construire la nouvelle configuration
      const newConfig = {
        email: emailAccount.email,
        username: updates.username || currentCredentials.username,
        password: updates.password || currentCredentials.password,
        displayName: updates.displayName || emailAccount.displayName,
        smtp: {
          ...currentCredentials.smtp,
          ...updates.smtp,
        },
        imap: updates.imap
          ? {
              ...currentCredentials.imap,
              ...updates.imap,
            }
          : currentCredentials.imap,
      };

      // Valider la nouvelle configuration
      const validation = SmtpConnectionService.validateSmtpConfig(newConfig);
      if (!validation.isValid) {
        return reply.code(400).send({
          error: "Configuration SMTP mise √† jour invalide",
          details: validation.errors,
          code: "INVALID_SMTP_UPDATE",
        });
      }

      // Tester la nouvelle configuration
      const smtpTest =
        await SmtpConnectionService.testSmtpConnection(newConfig);
      const imapTest =
        await SmtpConnectionService.testImapConnection(newConfig);

      const testResults = {
        smtp: smtpTest,
        imap: imapTest,
        overallSuccess:
          smtpTest.success && (imapTest.skipped || imapTest.success),
      };

      if (!testResults.overallSuccess) {
        return reply.code(400).send({
          error: "Tests de connexion √©chou√©s",
          message: "La nouvelle configuration SMTP ne fonctionne pas",
          testResults,
          code: "SMTP_UPDATE_TEST_FAILED",
        });
      }

      // Mettre √† jour le compte en base
      const newCredentials = {
        username: newConfig.username,
        password: newConfig.password,
        smtp: newConfig.smtp,
        imap: newConfig.imap,
      };

      await EmailAccount.findByIdAndUpdate(accountId, {
        $set: {
          displayName: newConfig.displayName,
          accessToken: JSON.stringify(newCredentials), // Sera chiffr√© automatiquement
          "settings.testResults": {
            smtp: smtpTest,
            imap: imapTest,
            testedAt: new Date(),
          },
        },
      });

      // R√©cup√©rer le compte mis √† jour
      const updatedAccount = await EmailAccount.findById(accountId);

      this.logger?.user(
        "Compte SMTP mis √† jour",
        {
          accountId: accountId.toString(),
          email: emailAccount.email,
          updatedFields: Object.keys(updates),
          testSuccess: testResults.overallSuccess,
        },
        {
          userId: userId.toString(),
          email: emailAccount.email,
          action: "smtp_account_updated",
        }
      );

      return reply.success(
        {
          account: updatedAccount.secureInfo,
          testResults,
          updatedFields: Object.keys(updates),
          updatedAt: new Date(),
        },
        "Compte SMTP mis √† jour avec succ√®s"
      );
    } catch (error) {
      if (error.statusCode && error.statusCode < 500 && error.isOperational) {
        return reply.code(error.statusCode).send({
          error: error.message,
          code: error.code || "SMTP_UPDATE_ERROR",
          details: error.details || null,
        });
      }
      throw error;
    }
  }

  /**
   * üß™ Tester un compte SMTP existant
   */
  static async testExistingSmtpAccount(request, reply) {
    try {
      const userId = request.user._id;
      const { accountId } = request.params;

      // R√©cup√©rer le compte
      const emailAccount = await EmailAccount.findOne({
        _id: accountId,
        userId: userId,
      });

      if (!emailAccount) {
        return reply.code(404).send({
          error: "Compte email introuvable",
          message: "Ce compte email n'existe pas ou ne vous appartient pas",
          code: "EMAIL_ACCOUNT_NOT_FOUND",
        });
      }

      // V√©rifier que c'est un compte SMTP
      if (
        !emailAccount.accessToken ||
        !emailAccount.settings?.connectionType === "smtp"
      ) {
        return reply.code(400).send({
          error: "Compte non SMTP",
          message: "Ce compte n'est pas configur√© en SMTP",
          code: "NOT_SMTP_ACCOUNT",
        });
      }

      // Tester la connexion via le service
      const result =
        await SmtpConnectionService.testExistingSmtpAccount(emailAccount);

      this.logger?.user(
        "Test connexion SMTP existant",
        {
          accountId: accountId.toString(),
          email: emailAccount.email,
          testStatus: result.status,
          smtpSuccess: result.smtp?.success,
          imapSuccess: result.imap?.success || result.imap?.skipped,
        },
        {
          userId: userId.toString(),
          email: emailAccount.email,
          action: "existing_smtp_account_tested",
        }
      );

      return reply.success(result, "Test de connexion SMTP effectu√©");
    } catch (error) {
      if (error.statusCode && error.statusCode < 500 && error.isOperational) {
        return reply.code(error.statusCode).send({
          error: error.message,
          code: error.code || "SMTP_TEST_EXISTING_ERROR",
          details: error.details || null,
        });
      }
      throw error;
    }
  }

  /**
   * üîç Obtenir la description d'un provider
   */
  static getProviderDescription(providerKey) {
    const descriptions = {
      gmail:
        "Gmail - Service email de Google avec authentification OAuth2 recommand√©e",
      outlook:
        "Outlook - Service email de Microsoft avec support OAuth2 et SMTP",
      yahoo:
        "Yahoo Mail - Service email avec support SMTP et mots de passe d'application",
      other:
        "Serveur personnalis√© - Configuration manuelle pour tout autre provider SMTP",
    };
    return descriptions[providerKey] || "Provider SMTP personnalis√©";
  }

  /**
   * üìã Obtenir les instructions de configuration d'un provider
   */
  static getProviderInstructions(providerKey) {
    const instructions = {
      gmail: [
        "1. Activez l'authentification √† deux facteurs sur votre compte Google",
        "2. G√©n√©rez un mot de passe d'application dans les param√®tres de s√©curit√©",
        "3. Utilisez votre adresse Gmail compl√®te comme nom d'utilisateur",
        "4. Utilisez le mot de passe d'application g√©n√©r√©",
      ],
      outlook: [
        "1. Activez l'authentification √† deux facteurs sur votre compte Microsoft",
        "2. Activez l'acc√®s SMTP dans les param√®tres Outlook",
        "3. Utilisez votre adresse email compl√®te comme nom d'utilisateur",
        "4. Utilisez votre mot de passe habituel ou un mot de passe d'application",
      ],
      yahoo: [
        "1. Activez l'authentification √† deux facteurs",
        "2. G√©n√©rez un mot de passe d'application dans les param√®tres de s√©curit√©",
        "3. Utilisez votre adresse Yahoo compl√®te comme nom d'utilisateur",
        "4. Utilisez le mot de passe d'application g√©n√©r√© (16 caract√®res)",
      ],
      other: [
        "1. Contactez votre provider pour obtenir les param√®tres SMTP",
        "2. V√©rifiez si SSL/TLS est requis",
        "3. Confirmez le port √† utiliser (587, 465, ou 25)",
        "4. Testez la configuration avant de sauvegarder",
      ],
    };
    return instructions[providerKey] || [];
  }

  /**
   * üîí Obtenir les notes de s√©curit√© d'un provider
   */
  static getProviderSecurityNotes(providerKey) {
    const securityNotes = {
      gmail: [
        "‚ö†Ô∏è N'utilisez jamais votre mot de passe principal",
        "‚úÖ Utilisez toujours un mot de passe d'application",
        "üîí Port 587 avec STARTTLS recommand√©",
      ],
      outlook: [
        "‚ö†Ô∏è Activez l'authentification moderne si disponible",
        "‚úÖ Utilisez l'authentification √† deux facteurs",
        "üîí Port 587 avec STARTTLS recommand√©",
      ],
      yahoo: [
        "‚ö†Ô∏è Les mots de passe d'application sont obligatoires",
        "‚úÖ V√©rifiez que l'acc√®s SMTP est activ√©",
        "üîí Port 587 ou 465 recommand√©",
      ],
      other: [
        "‚ö†Ô∏è V√©rifiez la r√©putation du serveur SMTP",
        "‚úÖ Utilisez toujours une connexion chiffr√©e",
        "üîí √âvitez le port 25 (souvent bloqu√©)",
      ],
    };
    return securityNotes[providerKey] || [];
  }

  /**
   * üîç D√©tecter automatiquement la configuration bas√©e sur l'email
   */
  static async detectProviderFromEmail(request, reply) {
    try {
      const { email } = request.query;

      if (!email) {
        return reply.code(400).send({
          error: "Email requis",
          message: "L'adresse email est n√©cessaire pour la d√©tection",
          code: "EMAIL_REQUIRED_FOR_DETECTION",
        });
      }

      const detection = SmtpConnectionService.detectProviderFromEmail(email);

      this.logger?.debug(
        "D√©tection automatique provider SMTP",
        {
          email,
          detectedProvider: detection?.provider,
          hasConfig: !!detection?.config,
        },
        {
          userId: request.user._id.toString(),
          action: "smtp_provider_detected",
        }
      );

      return reply.success(
        {
          email,
          detection: detection || {
            provider: "other",
            config: SmtpConnectionService.getProviderConfig("other"),
            message: "Provider non reconnu, configuration manuelle requise",
          },
          recommendations: this.getProviderInstructions(
            detection?.provider || "other"
          ),
        },
        "D√©tection de provider effectu√©e"
      );
    } catch (error) {
      if (error.statusCode && error.statusCode < 500 && error.isOperational) {
        return reply.code(error.statusCode).send({
          error: error.message,
          code: error.code || "PROVIDER_DETECTION_ERROR",
        });
      }
      throw error;
    }
  }
}

export default SmtpController;
