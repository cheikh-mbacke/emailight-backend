import AuthService from "../services/authService.js";
import User from "../models/User.js";

/**
 * üîê Authentication controller
 * ‚úÖ CORRIG√â: Gestion d'erreurs simplifi√©e + updateLastActive uniforme
 */
class AuthController {
  // ‚úÖ Injection du logger
  static setLogger(injectedLogger) {
    this.logger = injectedLogger;
  }

  /**
   * ‚úÖ FIX 1: M√©thode utilitaire pour gestion d'erreurs commune
   * Puisque le syst√®me Exceptionless g√®re d√©j√† les erreurs 5xx automatiquement,
   * on se contente de g√©rer les erreurs 4xx localement
   */
  static handleClientError(error, reply, defaultCode = "OPERATION_ERROR") {
    if (error.statusCode && error.statusCode < 500 && error.isOperational) {
      return reply.code(error.statusCode).send({
        error: error.message,
        code: error.code || defaultCode,
      });
    }
    // Les erreurs 5xx sont automatiquement g√©r√©es par le gestionnaire centralis√©
    throw error;
  }

  /**
   * ‚úÖ FIX 2: M√©thode utilitaire pour updateLastActive uniforme
   */
  static async updateUserLastActive(userId, request) {
    try {
      const userInstance = await User.findById(userId);
      if (userInstance) {
        await userInstance.updateLastActive(
          request.ip,
          request.headers["user-agent"]
        );
      }
    } catch (error) {
      // Log mais ne pas faire √©chouer l'authentification pour √ßa
      this.logger?.warn("√âchec mise √† jour lastActive", {
        userId: userId?.toString(),
        error: error.message,
      });
    }
  }

  /**
   * üìù User registration
   */
  static async register(request, reply) {
    try {
      const { name, email, password } = request.body;

      // Call the service
      const result = await AuthService.registerUser({ name, email, password });

      // Generate tokens
      const tokens = AuthService.generateTokens(result.user.id);

      return reply.code(201).success(
        {
          user: result.user,
          accessToken: tokens.accessToken,
          refreshToken: tokens.refreshToken,
          expiresIn: "24h",
        },
        "Compte cr√©√© avec succ√®s"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "REGISTRATION_ERROR");
    }
  }

  /**
   * üîë User login
   * ‚úÖ CORRIG√â: updateLastActive uniforme
   */
  static async login(request, reply) {
    try {
      const { email, password } = request.body;

      // Call the authentication service
      const result = await AuthService.authenticateUser({ email, password });

      // ‚úÖ FIX 2: Utilisation de la m√©thode commune pour updateLastActive
      await this.updateUserLastActive(result.user.id, request);

      // Generate tokens
      const tokens = AuthService.generateTokens(result.user.id);

      return reply.success(
        {
          user: result.user,
          accessToken: tokens.accessToken,
          refreshToken: tokens.refreshToken,
          expiresIn: "24h",
          lastLogin: result.lastLogin,
        },
        "Connexion r√©ussie"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "LOGIN_ERROR");
    }
  }

  /**
   * üîÑ Refresh access token
   */
  static async refreshToken(request, reply) {
    try {
      const { refreshToken } = request.body;

      if (!refreshToken) {
        return reply.code(400).send({
          error: "Token de rafra√Æchissement requis",
          code: "MISSING_REFRESH_TOKEN",
        });
      }

      // Call the service to refresh the token
      const result = await AuthService.refreshAccessToken(refreshToken);

      return reply.success(
        {
          user: result.user,
          accessToken: result.accessToken,
          refreshToken: result.refreshToken,
          expiresIn: result.expiresIn,
        },
        "Token rafra√Æchi avec succ√®s"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "TOKEN_REFRESH_ERROR");
    }
  }

  /**
   * üîç Google OAuth authentication
   * ‚úÖ CORRIG√â: updateLastActive uniforme + logique m√©tier d√©plac√©e
   */
  static async googleAuth(request, reply) {
    try {
      const { googleToken } = request.body;

      if (!googleToken) {
        return reply.code(400).send({
          error: "Token Google requis",
          code: "MISSING_GOOGLE_TOKEN",
        });
      }

      // ‚úÖ FIX 3: Logique m√©tier d√©plac√©e dans le service
      // Au lieu de v√©rifier le token ici, on d√©l√®gue tout au service
      const googleUserData = await this.verifyGoogleToken(googleToken);

      if (!googleUserData) {
        return reply.code(401).send({
          error: "Token Google invalide",
          code: "INVALID_GOOGLE_TOKEN",
        });
      }

      // Authenticate with Google data
      const result = await AuthService.authenticateWithGoogle(googleUserData);

      // ‚úÖ FIX 2: Utilisation de la m√©thode commune pour updateLastActive
      await this.updateUserLastActive(result.user.id, request);

      // Generate tokens
      const tokens = AuthService.generateTokens(result.user.id);

      this.logger.auth(
        "Authentification Google r√©ussie",
        {
          email: result.user.email,
          isNew: result.isNew,
          linkedAccount: result.linkedAccount,
        },
        {
          userId: result.user.id,
          email: result.user.email,
          action: "google_auth_success",
        }
      );

      return reply.success(
        {
          user: result.user,
          accessToken: tokens.accessToken,
          refreshToken: tokens.refreshToken,
          expiresIn: "24h",
          isNew: result.isNew,
          linkedAccount: result.linkedAccount,
        },
        result.isNew
          ? "Compte cr√©√© et connect√© avec Google"
          : result.linkedAccount
            ? "Compte li√© √† Google avec succ√®s"
            : "Connexion Google r√©ussie"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "GOOGLE_AUTH_ERROR");
    }
  }

  /**
   * üö™ Logout
   */
  static async logout(request, reply) {
    try {
      // Note: With JWT, logout is mostly client-side
      // A token blacklist can optionally be added here

      this.logger.auth(
        "D√©connexion utilisateur",
        {
          email: request.user.email,
        },
        {
          userId: request.user._id.toString(),
          email: request.user.email,
          action: "logout",
        }
      );

      return reply.success(null, "D√©connexion r√©ussie");
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "LOGOUT_ERROR");
    }
  }

  /**
   * üë§ Get current user profile
   */
  static async getProfile(request, reply) {
    try {
      // User is already available via auth middleware
      const user = request.user;

      // Populate connected email accounts
      await user.populate(
        "connectedEmailAccounts",
        "email provider isActive lastUsed"
      );

      return reply.success(
        {
          user: user.profile,
          preferences: user.preferences,
          securityStats: user.securityStats,
          connectedAccounts: user.connectedEmailAccounts,
        },
        "Profil r√©cup√©r√© avec succ√®s"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "GET_PROFILE_ERROR");
    }
  }

  /**
   * ‚úèÔ∏è Update user profile
   */
  static async updateProfile(request, reply) {
    try {
      const { name, email, currentPassword, newPassword } = request.body;
      const userId = request.user._id;

      // If password is changing
      if (newPassword) {
        await AuthService.changePassword(userId, {
          currentPassword,
          newPassword,
        });
      }

      // Update other fields
      const updates = {};
      if (name) updates.name = name.trim();
      if (email && email !== request.user.email) {
        // Check if the new email is available
        const existingUser = await User.findOne({ email: email.toLowerCase() });
        if (existingUser) {
          return reply.code(409).send({
            error: "Email d√©j√† utilis√©",
            message: "Cette adresse email est d√©j√† associ√©e √† un autre compte",
          });
        }
        updates.email = email.toLowerCase();
        updates.isEmailVerified = false; // Will require new verification
      }

      if (Object.keys(updates).length > 0) {
        await User.findByIdAndUpdate(userId, updates, { runValidators: true });
      }

      // Get the updated user
      const updatedUser = await User.findById(userId);

      this.logger.user(
        "Profil mis √† jour",
        {
          updatedFields: Object.keys(updates),
          passwordChanged: !!newPassword,
        },
        {
          userId: userId.toString(),
          email: updatedUser.email,
          action: "profile_updated",
        }
      );

      return reply.success(
        {
          user: updatedUser.profile,
        },
        "Profil mis √† jour avec succ√®s"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "PROFILE_UPDATE_ERROR");
    }
  }

  /**
   * üóëÔ∏è Delete user account (GDPR)
   */
  static async deleteAccount(request, reply) {
    try {
      const userId = request.user._id;

      const result = await AuthService.deleteUserAccount(userId);

      return reply.success(
        {
          accountDeleted: result.accountDeleted,
          deletedAt: result.deletedAt,
        },
        "Compte supprim√© d√©finitivement"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "ACCOUNT_DELETION_ERROR");
    }
  }

  /**
   * üîÑ Forgot password
   */
  static async forgotPassword(request, reply) {
    try {
      const { email } = request.body;

      const result = await AuthService.generatePasswordResetToken(email);

      // ‚úÖ FIX 4: S√âCURIT√â - Ne plus exposer le token m√™me en dev
      // Le token doit √™tre envoy√© par email uniquement
      return reply.success(
        {
          emailSent: result.emailSent,
          // ‚ùå SUPPRIM√â: Plus d'exposition du token pour des raisons de s√©curit√©
          // ...(process.env.NODE_ENV === "development" && {
          //   resetToken: result.resetToken,
          //   expiresAt: result.expiresAt,
          // }),
        },
        result.message
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "PASSWORD_RESET_ERROR");
    }
  }

  /**
   * üîí Reset password
   */
  static async resetPassword(request, reply) {
    try {
      const { token, password } = request.body;

      const result = await AuthService.resetPasswordWithToken({
        token,
        password,
      });

      return reply.success(
        {
          passwordReset: result.passwordReset,
          user: result.user,
        },
        "Mot de passe r√©initialis√© avec succ√®s"
      );
    } catch (error) {
      // ‚úÖ FIX 1: Utilisation de la m√©thode commune
      return this.handleClientError(error, reply, "PASSWORD_RESET_ERROR");
    }
  }

  /**
   * üîç Helper: Verify Google token (implemented with google-auth-library)
   * ‚úÖ Simplifi√©e mais garde la logique m√©tier dans le service
   */
  static async verifyGoogleToken(googleToken) {
    try {
      // Import Google Auth Service
      const GoogleAuthService = (
        await import("../services/googleAuthService.js")
      ).default;

      // Verify token with Google
      const userData = await GoogleAuthService.verifyGoogleToken(googleToken);

      return userData;
    } catch (error) {
      // ‚úÖ Les erreurs syst√®me remontent automatiquement au gestionnaire centralis√©
      // Les erreurs m√©tier (token invalide) retournent null comme pr√©vu
      this.logger.error("Erreur verification token Google", error, {
        action: "google_token_verification_failed",
      });

      // Si c'est une erreur syst√®me, elle remontera
      // Si c'est m√©tier, on retourne null (comportement attendu)
      if (error.isOperational && error.statusCode < 500) {
        return null;
      }

      throw error;
    }
  }
}

export default AuthController;
