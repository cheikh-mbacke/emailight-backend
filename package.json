{
  "name": "emailight-backend",
  "version": "1.0.0",
  "private": true,
  "description": "Backend microservices pour Emailight - Application de reformulation d'emails par IA",
  "keywords": [
    "emailight",
    "microservices",
    "nodejs",
    "email",
    "ai",
    "reformulation"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/cheikh-mbacke/emailight-backend.git"
  },
  "license": "MIT",
  "author": "Mbacke Cheikh",
  "scripts": {
    "clean": "docker compose -f docker/docker-compose.yml down -v --remove-orphans",
    "clean:all": "docker compose -f docker/docker-compose.yml down -v --remove-orphans && docker volume prune -f --filter label=emailight && docker network prune -f --filter name=emailight",
    "clean:containers": "docker compose -f docker/docker-compose.yml down --remove-orphans",
    "clean:network": "docker network prune -f",
    "clean:volumes": "docker compose -f docker/docker-compose.yml down -v",
    "clean:force": "docker compose -f docker/docker-compose.yml --project-name emailight down -v --remove-orphans || true && docker rm -f $(docker ps -aq --filter name=emailight-) 2>/dev/null || true",
    "clean:user": "npm run clean:user:container && npm run clean:user:volumes && npm run clean:user:image",
    "clean:user:container": "docker compose -f docker/docker-compose.yml stop user-service && docker compose -f docker/docker-compose.yml rm -f user-service",
    "clean:user:volumes": "docker volume rm emailight_user_service_logs 2>/dev/null || true",
    "clean:user:image": "docker rmi emailight_user-service 2>/dev/null || true && docker rmi emailight-user-service 2>/dev/null || true",
    "clean:user:logs": "docker compose -f docker/docker-compose.yml exec user-service sh -c 'rm -rf /usr/src/app/logs/*' 2>/dev/null || true",
    "clean:user:uploads": "docker compose -f docker/docker-compose.yml exec user-service sh -c 'rm -rf /usr/src/app/uploads/avatars/* && rm -rf /usr/src/app/uploads/temp/*' 2>/dev/null || true",
    "clean:user:complete": "npm run clean:user:container && npm run clean:user:volumes && npm run clean:user:image && echo '✅ Service user complètement nettoyé'",
    "clean:ai": "npm run clean:ai:container && npm run clean:ai:volumes && npm run clean:ai:image",
    "clean:ai:container": "docker compose -f docker/docker-compose.yml stop ai-service && docker compose -f docker/docker-compose.yml rm -f ai-service",
    "clean:ai:volumes": "docker volume rm emailight_ai_service_logs 2>/dev/null || true",
    "clean:ai:image": "docker rmi emailight_ai-service 2>/dev/null || true && docker rmi emailight-ai-service 2>/dev/null || true",
    "clean:ai:complete": "npm run clean:ai:container && npm run clean:ai:volumes && npm run clean:ai:image && echo '✅ Service ai complètement nettoyé'",
    "clean:email": "npm run clean:email:container && npm run clean:email:volumes && npm run clean:email:image",
    "clean:email:container": "docker compose -f docker/docker-compose.yml stop email-service && docker compose -f docker/docker-compose.yml rm -f email-service",
    "clean:email:volumes": "docker volume rm emailight_email_service_logs 2>/dev/null || true",
    "clean:email:image": "docker rmi emailight_email-service 2>/dev/null || true && docker rmi emailight-email-service 2>/dev/null || true",
    "clean:email:complete": "npm run clean:email:container && npm run clean:email:volumes && npm run clean:email:image && echo '✅ Service email complètement nettoyé'",
    "clean:subscription": "npm run clean:subscription:container && npm run clean:subscription:volumes && npm run clean:subscription:image",
    "clean:subscription:container": "docker compose -f docker/docker-compose.yml stop subscription-service && docker compose -f docker/docker-compose.yml rm -f subscription-service",
    "clean:subscription:volumes": "docker volume rm emailight_subscription_service_logs 2>/dev/null || true",
    "clean:subscription:image": "docker rmi emailight_subscription-service 2>/dev/null || true && docker rmi emailight-subscription-service 2>/dev/null || true",
    "clean:subscription:complete": "npm run clean:subscription:container && npm run clean:subscription:volumes && npm run clean:subscription:image && echo '✅ Service subscription complètement nettoyé'",
    "clean:notification": "npm run clean:notification:container && npm run clean:notification:volumes && npm run clean:notification:image",
    "clean:notification:container": "docker compose -f docker/docker-compose.yml stop notification-service && docker compose -f docker/docker-compose.yml rm -f notification-service",
    "clean:notification:volumes": "docker volume rm emailight_notification_service_logs 2>/dev/null || true",
    "clean:notification:image": "docker rmi emailight_notification-service 2>/dev/null || true && docker rmi emailight-notification-service 2>/dev/null || true",
    "clean:notification:complete": "npm run clean:notification:container && npm run clean:notification:volumes && npm run clean:notification:image && echo '✅ Service notification complètement nettoyé'",
    "clean:infra": "npm run clean:infra:containers && npm run clean:infra:volumes",
    "clean:infra:containers": "docker compose -f docker/docker-compose.yml stop mongodb redis mongo-express redis-commander exceptionless && docker compose -f docker/docker-compose.yml rm -f mongodb redis mongo-express redis-commander exceptionless",
    "clean:infra:volumes": "docker volume rm emailight_mongodb_data emailight_redis_data emailight_exceptionless_data emailight_exceptionless_storage 2>/dev/null || true",
    "create-structure": "node scripts/create-structure.js",
    "dev": "npm run setup:check && docker compose -f docker/docker-compose.yml up -d",
    "postdev": "node scripts/post-dev-message.js",
    "dev:infra": "docker compose -f docker/docker-compose.yml up -d mongodb redis",
    "dev:services": "docker compose -f docker/docker-compose.yml up -d user-service",
    "dev:admin": "docker compose -f docker/docker-compose.yml up -d mongo-express redis-commander",
    "dev:monitoring": "npm run fix:permissions:auto && docker compose -f docker/docker-compose.yml up -d exceptionless",
    "rebuild:user": "npm run clean:user:complete && docker compose -f docker/docker-compose.yml build user-service && docker compose -f docker/docker-compose.yml up -d user-service",
    "rebuild:ai": "npm run clean:ai:complete && docker compose -f docker/docker-compose.yml build ai-service && docker compose -f docker/docker-compose.yml up -d ai-service",
    "rebuild:email": "npm run clean:email:complete && docker compose -f docker/docker-compose.yml build email-service && docker compose -f docker/docker-compose.yml up -d email-service",
    "rebuild:subscription": "npm run clean:subscription:complete && docker compose -f docker/docker-compose.yml build subscription-service && docker compose -f docker/docker-compose.yml up -d subscription-service",
    "rebuild:notification": "npm run clean:notification:complete && docker compose -f docker/docker-compose.yml build notification-service && docker compose -f docker/docker-compose.yml up -d notification-service",
    "fix:permissions": "node scripts/fix-permissions.js",
    "fix:permissions:auto": "node scripts/fix-permissions.js --auto",
    "format": "npm run format:user",
    "format:user": "cd user-service && npm run format",
    "lint": "npm run lint:user",
    "lint:user": "cd user-service && npm run lint",
    "logs": "docker compose -f docker/docker-compose.yml logs -f",
    "logs:mongo": "docker compose -f docker/docker-compose.yml logs -f mongodb",
    "logs:redis": "docker compose -f docker/docker-compose.yml logs -f redis",
    "logs:exceptionless": "docker compose -f docker/docker-compose.yml logs -f exceptionless",
    "logs:user": "docker compose -f docker/docker-compose.yml logs -f user-service",
    "logs:ai": "docker compose -f docker/docker-compose.yml logs -f ai-service",
    "logs:email": "docker compose -f docker/docker-compose.yml logs -f email-service",
    "logs:subscription": "docker compose -f docker/docker-compose.yml logs -f subscription-service",
    "logs:notification": "docker compose -f docker/docker-compose.yml logs -f notification-service",
    "logs:clean:user": "sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' $(docker ps -aqf 'name=user-service'))",
    "logs:clean:ai": "sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' $(docker ps -aqf 'name=ai-service'))",
    "logs:clean:email": "sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' $(docker ps -aqf 'name=email-service'))",
    "logs:clean:subscription": "sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' $(docker ps -aqf 'name=subscription-service'))",
    "logs:clean:notification": "sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' $(docker ps -aqf 'name=notification-service'))",
    "restart": "docker compose -f docker/docker-compose.yml restart",
    "restart:monitoring": "npm run fix:permissions:auto && docker compose -f docker/docker-compose.yml restart exceptionless",
    "restart:user": "docker compose -f docker/docker-compose.yml restart user-service",
    "restart:ai": "docker compose -f docker/docker-compose.yml restart ai-service",
    "restart:email": "docker compose -f docker/docker-compose.yml restart email-service",
    "restart:subscription": "docker compose -f docker/docker-compose.yml restart subscription-service",
    "restart:notification": "docker compose -f docker/docker-compose.yml restart notification-service",
    "restart:infra": "docker compose -f docker/docker-compose.yml restart mongodb redis",
    "setup": "node scripts/setup.js",
    "setup:check": "npm run fix:permissions:auto",
    "setup:user:uploads": "docker compose -f docker/docker-compose.yml exec user-service mkdir -p uploads/avatars uploads/temp",
    "status": "node scripts/status.js",
    "status:raw": "docker compose -f docker/docker-compose.yml ps",
    "status:user": "docker compose -f docker/docker-compose.yml ps user-service && docker exec emailight-user-service curl -s http://localhost:3001/health 2>/dev/null | jq . || echo 'Service user non accessible'",
    "status:services": "docker compose -f docker/docker-compose.yml ps user-service ai-service email-service subscription-service notification-service",
    "status:infra": "docker compose -f docker/docker-compose.yml ps mongodb redis mongo-express redis-commander exceptionless",
    "stop": "docker compose -f docker/docker-compose.yml down",
    "stop:monitoring": "docker compose -f docker/docker-compose.yml stop exceptionless",
    "stop:user": "docker compose -f docker/docker-compose.yml stop user-service",
    "stop:ai": "docker compose -f docker/docker-compose.yml stop ai-service",
    "stop:email": "docker compose -f docker/docker-compose.yml stop email-service",
    "stop:subscription": "docker compose -f docker/docker-compose.yml stop subscription-service",
    "stop:notification": "docker compose -f docker/docker-compose.yml stop notification-service",
    "stop:services": "docker compose -f docker/docker-compose.yml stop user-service ai-service email-service subscription-service notification-service",
    "stop:infra": "docker compose -f docker/docker-compose.yml stop mongodb redis mongo-express redis-commander exceptionless",

    "build": "npm run build:user",
    "build:user": "docker compose -f docker/docker-compose.yml build user-service",
    "build:ai": "docker compose -f docker/docker-compose.yml build ai-service",
    "build:email": "docker compose -f docker/docker-compose.yml build email-service",
    "build:subscription": "docker compose -f docker/docker-compose.yml build subscription-service",
    "build:notification": "docker compose -f docker/docker-compose.yml build notification-service",
    "build:all": "docker compose -f docker/docker-compose.yml build"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  }
}
