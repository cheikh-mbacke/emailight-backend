# .github/workflows/deploy.yml
name: CI/CD Pipeline - Emailight Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ====================================
  # JOB 1: BUILD ET PUSH DOCKER IMAGE
  # ====================================
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Build et push Docker image

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          file: ./user-service/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # ====================================
  # JOB 2: DEPLOIEMENT EN PRODUCTION
  # ====================================
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    name: Deploiement en production
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add VPS to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory on VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            mkdir -p /opt/emailight-backend
            mkdir -p /opt/emailight-backend/uploads
            cd /opt/emailight-backend
          "

      - name: Copy deployment files to VPS
        run: |
          scp ./docker/docker-compose.production.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight-backend/
          scp -r ./docker/mongodb/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight-backend/
          scp -r ./docker/redis/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight-backend/

      - name: Update production compose with correct image
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd /opt/emailight-backend
            IMAGE_TAG='${{ needs.build.outputs.image-tag }}'
            # Extraire le tag correctement (premiere ligne sans les guillemets)
            CLEAN_TAG=\$(echo \"\$IMAGE_TAG\" | head -n1 | tr -d '\\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            echo \"Tag nettoye: '\$CLEAN_TAG'\"
            sed -i 's#ghcr.io/cheikh-mbacke/emailight-backend:latest#'\"\$CLEAN_TAG\"'#g' docker-compose.production.yml
            echo \"Image mise a jour: \$CLEAN_TAG\"
          "

      - name: Verify image tag update
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd /opt/emailight-backend
            echo 'Contenu du docker-compose apres modification:'
            grep 'image:' docker-compose.production.yml
          "

      - name: Create production environment file
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cat > /opt/emailight-backend/.env << 'EOF'
          # ======================
          # PRODUCTION ENVIRONMENT
          # ======================

          NODE_ENV=production
          HOST=0.0.0.0

          # Infrastructure
          MONGO_ROOT_USERNAME=emailight_admin
          MONGO_ROOT_PASSWORD=${{ secrets.PROD_MONGO_ROOT_PASSWORD }}
          MONGO_DATABASE=emailight_prod
          MONGO_APP_USERNAME=emailight_app
          MONGO_APP_PASSWORD=${{ secrets.PROD_MONGO_APP_PASSWORD }}
          MONGO_PORT=27017

          REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}
          REDIS_PORT=6380

          # Services
          USER_SERVICE_PORT=3001
          EXCEPTIONLESS_PORT=8080

          # Security
          JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
          JWT_EXPIRES_IN=24h
          JWT_REFRESH_EXPIRES_IN=7d
          BCRYPT_ROUNDS=12
          ENCRYPTION_KEY=${{ secrets.PROD_ENCRYPTION_KEY }}

          # Rate Limiting (production)
          RATE_LIMIT_MAX=100
          RATE_LIMIT_WINDOW=60000

          # Google OAuth
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI=https://api.emailight.com/auth/google/callback

          # Gmail OAuth
          GMAIL_CLIENT_ID=${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET=${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REDIRECT_URI=https://api.emailight.com/auth/gmail/callback

          # Monitoring Exceptionless
          ENABLE_LOGGING=true
          LOG_LEVEL=info
          VERBOSE_LOGS=false
          USER_SERVICE_EXCEPTIONLESS_API_KEY=${{ secrets.USER_SERVICE_EXCEPTIONLESS_API_KEY }}
          USER_SERVICE_EXCEPTIONLESS_SERVER_URL=https://exceptionless.emailight.com

          # Application
          APP_NAME=Emailight
          APP_BASE_URL=https://api.emailight.com
          SUPPORT_EMAIL=support@emailight.com

          # CORS (production)
          CORS_ORIGINS=https://api.emailight.com,https://emailight.com,https://app.emailight.com
          ALLOWED_ORIGINS=https://api.emailight.com,https://emailight.com,https://app.emailight.com

          # Localisation
          LOCALE=fr-FR
          TIMEZONE=Europe/Paris

          # SMTP System
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SMTP_ENCRYPTION=SSL

          # Upload
          UPLOAD_MAX_SIZE=5242880
          UPLOAD_ALLOWED_TYPES=image/jpeg,image/png,image/webp,image/gif

          # URLs completes
          MONGODB_URI=mongodb://emailight_app:${{ secrets.PROD_MONGO_APP_PASSWORD }}@mongodb:27017/emailight_prod
          REDIS_URL=redis://:${{ secrets.PROD_REDIS_PASSWORD }}@redis:6379
          EOF
          "

      - name: Login to GitHub Container Registry on VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            echo '${{ secrets.DOCKER_REGISTRY_TOKEN }}' | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          "

      - name: Deploy application optimized
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd /opt/emailight-backend
            
            # Arreter seulement le user-service pour deployment plus rapide
            docker compose -f docker-compose.production.yml stop user-service || true
            
            # Supprimer specifiquement l'ancienne image user-service
            IMAGE_TAG='${{ needs.build.outputs.image-tag }}'
            CLEAN_TAG=\$(echo \"\$IMAGE_TAG\" | head -n1 | tr -d '\\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            docker image rm \$CLEAN_TAG || true
            
            # Pull seulement la nouvelle image user-service
            docker compose -f docker-compose.production.yml pull user-service
            
            # Redemarrer le user-service avec la nouvelle image
            docker compose -f docker-compose.production.yml up -d user-service --force-recreate
            
            # Attendre que le service soit pret
            echo 'Attente du demarrage du user-service...'
            sleep 30
            
            # Verifier le statut
            docker compose -f docker-compose.production.yml ps
          "

      - name: Basic deployment verification
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cd /opt/emailight-backend
            
            # Verifier que le conteneur user-service est running
            if docker compose -f docker-compose.production.yml ps user-service | grep -q 'Up'; then
              echo 'Conteneur user-service demarre'
              
              # Attente supplementaire pour initialisation complete
              echo 'Attente initialisation complete...'
              sleep 15
              
              # Test basique de connectivite
              if curl -s --max-time 10 http://localhost:3001/health >/dev/null; then
                echo 'Deploiement reussi - API accessible'
              else
                echo 'Deploiement reussi - API en cours d initialisation'
              fi
            else
              echo 'Erreur: conteneur user-service non demarre'
              docker compose -f docker-compose.production.yml logs user-service --tail 50
              exit 1
            fi
          "

# ====================================
  # JOB 3: TESTS D'INTEGRATION
  # ====================================
  integration-tests:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    name: Tests d'integration

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_admin
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: emailight_test
        ports:
          - 27017:27017
        volumes:
          - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
          - 
      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: user-service/package-lock.json

      - name: Install dependencies
        working-directory: ./user-service
        run: npm ci

      - name: Wait for local test services
        run: |
          echo "Waiting for local MongoDB..."
          while ! nc -z localhost 27017; do sleep 1; done
          echo "Local MongoDB is ready!"

          echo "Waiting for local Redis..."
          while ! nc -z localhost 6379; do sleep 1; done
          echo "Local Redis is ready!"

      - name: Wait for production API to be ready
        run: |
          echo "Waiting for production API..."
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -s --max-time 10 https://api.emailight.com/health >/dev/null; then
              echo "Production API is ready!"
              break
            fi
            
            echo "Attempt $attempt/$max_attempts - API not ready yet, waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "Production API failed to become ready within timeout"
            exit 1
          fi

      - name: Generate test environment variables
        run: |
          # Générer une clé d'encryption valide
          ENCRYPTION_KEY=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
          echo "ENCRYPTION_KEY=$ENCRYPTION_KEY" >> $GITHUB_ENV
          
          # Générer un nom de base de données unique avec timestamp
          TIMESTAMP=$(date +%s)
          UNIQUE_DB_NAME="emailight_test_$TIMESTAMP"
          MONGODB_TEST_URI="mongodb://test_admin:test_password@localhost:27017/$UNIQUE_DB_NAME"
          echo "MONGODB_TEST_URI=$MONGODB_TEST_URI" >> $GITHUB_ENV
          echo "Using unique test database: $UNIQUE_DB_NAME"

      - name: Start user-service for tests
        working-directory: ./user-service
        run: |
          echo "🚀 Démarrage du user-service pour les tests..."

          # Arrêter l'API existante si elle tourne
          pkill -f "node.*user-service" 2>/dev/null || echo "Aucune API à arrêter"
          sleep 2

          # Démarrer l'API avec la nouvelle base de données
          npm start &
          SERVICE_PID=$!
          echo "SERVICE_PID=$SERVICE_PID" >> $GITHUB_ENV

          # Attendre que le service soit prêt
          echo "⏳ Attente du démarrage du service..."
          for i in {1..30}; do
            if curl -s http://localhost:3001/health >/dev/null 2>&1; then
              echo "✅ Service démarré et accessible"
              break
            fi
            echo "Tentative $i/30..."
            sleep 2
          done

          # Vérifier que le service est bien démarré
          if ! curl -s http://localhost:3001/health >/dev/null 2>&1; then
            echo "❌ Service non accessible après 60 secondes"
            echo "Logs du service :"
            ps aux | grep node || echo "Aucun processus node trouvé"
            exit 1
          fi
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ env.MONGODB_TEST_URI }}
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_for_ci_cd_pipeline
          JWT_EXPIRES_IN: 1h
          JWT_REFRESH_EXPIRES_IN: 7d
          BCRYPT_ROUNDS: 4
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          RATE_LIMIT_MAX: 1000
          RATE_LIMIT_WINDOW: 60000
          DISABLE_TOKEN_REFRESH_SCHEDULER: true
          ENABLE_LOGGING: false
          LOG_LEVEL: error
          USER_SERVICE_PORT: 3001
          CI: true

      - name: Run unit tests with coverage
        working-directory: ./user-service
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ env.MONGODB_TEST_URI }}
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_for_ci_cd_pipeline
          JWT_EXPIRES_IN: 1h
          JWT_REFRESH_EXPIRES_IN: 7d
          BCRYPT_ROUNDS: 4
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          RATE_LIMIT_MAX: 1000
          RATE_LIMIT_WINDOW: 60000
          DISABLE_TOKEN_REFRESH_SCHEDULER: true
          ENABLE_LOGGING: false
          LOG_LEVEL: error
          CI: true

      - name: Stop user-service after tests
        if: always()
        run: |
          echo "🛑 Arrêt du user-service..."
          if [ -n "$SERVICE_PID" ]; then
            kill $SERVICE_PID 2>/dev/null || echo "Processus déjà arrêté"
          fi
          # Nettoyage des processus node
          pkill -f "node.*user-service" 2>/dev/null || echo "Aucun processus à arrêter"

      - name: Diagnostic des tests en cas d'échec
        if: failure()
        working-directory: ./user-service
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ env.MONGODB_TEST_URI }}
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_for_ci_cd_pipeline
          JWT_EXPIRES_IN: 1h
          JWT_REFRESH_EXPIRES_IN: 7d
          BCRYPT_ROUNDS: 4
          ENCRYPTION_KEY: ${{ env.ENCRYPTION_KEY }}
          RATE_LIMIT_MAX: 1000
          RATE_LIMIT_WINDOW: 60000
          DISABLE_TOKEN_REFRESH_SCHEDULER: true
          ENABLE_LOGGING: false
          LOG_LEVEL: error
          CI: true
        run: |
          echo "🔍 Diagnostic des tests en cas d'échec..."
          echo "Variables d'environnement utilisées:"
          echo "MONGODB_URI: $MONGODB_URI"
          echo "NODE_ENV: $NODE_ENV"
          echo "CI: $CI"
          
          # Test de connexion MongoDB avec credentials
          echo "Test de connexion MongoDB avec credentials..."
          node -e "
            const mongoose = require('mongoose');
            mongoose.connect('$MONGODB_URI').then(() => {
              console.log('✅ Connexion MongoDB avec credentials réussie');
              mongoose.disconnect();
            }).catch(err => {
              console.log('❌ Erreur connexion MongoDB:', err.message);
            });
          "
          
          # Exécuter un test simple pour vérifier l'environnement
          echo "Exécution d'un test simple..."
          npm test -- --testNamePattern="Test simple" --verbose || echo "Tests échoués"

      - name: Run integration tests against production
        run: |
          echo "Running integration tests against https://api.emailight.com"

          # Test 1: Health endpoint
          echo "Testing health endpoint..."
          response=$(curl -s -w "%{http_code}" https://api.emailight.com/health)
          if echo "$response" | grep -q "200$"; then
            echo "✅ Health endpoint OK"
          else
            echo "❌ Health endpoint failed"
            exit 1
          fi

          # Test 2: API structure validation
          echo "Testing API structure..."
          health_data=$(curl -s https://api.emailight.com/health)
          if echo "$health_data" | grep -q '"status":"success"'; then
            echo "✅ API structure OK"
          else
            echo "❌ API structure invalid"
            exit 1
          fi

          # Test 3: Database connectivity
          echo "Testing database connectivity..."
          if echo "$health_data" | grep -q '"status":"connected"'; then
            echo "✅ Database connectivity OK"
          else
            echo "❌ Database connectivity failed"
            exit 1
          fi

          echo "All integration tests passed!"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          working-directory: ./user-service
          fail_ci_if_error: false

      - name: Rollback on test failure
        if: failure()
        run: |
          echo "Tests failed - considering rollback..."
          # Ici vous pourriez ajouter une logique de rollback automatique
          # Par exemple: redéployer la dernière version stable
          echo "Manual intervention required for rollback"

      - name: Final status report
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🚀 Deploiement et tests reussis"
            echo "📊 API operationnelle: https://api.emailight.com"
            echo "🔍 Monitoring: https://exceptionless.emailight.com"
          else
            echo "❌ Tests d'integration echoues"
            echo "🔧 Verification manuelle requise"
          fi