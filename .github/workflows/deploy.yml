name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  DOCKER_COMPOSE_VERSION: "2.20.0"

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: |
          cd user-service
          npm ci

      - name: 🧪 Run tests
        run: |
          cd user-service
          npm run test

  deploy:
    name: 🚀 Deploy to VPS
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: 📋 Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment..."

          # Variables
          PROJECT_DIR="/opt/emailight"
          BACKUP_DIR="/opt/backups/emailight"
          DATE=$(date +%Y%m%d_%H%M%S)

          # Create directories
          mkdir -p $PROJECT_DIR
          mkdir -p $BACKUP_DIR

          # Backup current deployment if exists
          if [ -d "$PROJECT_DIR/docker" ]; then
            echo "📦 Creating backup..."
            tar -czf "$BACKUP_DIR/backup_$DATE.tar.gz" -C $PROJECT_DIR .
            # Keep only last 5 backups
            ls -t $BACKUP_DIR/backup_*.tar.gz | tail -n +6 | xargs -r rm
          fi

          # Stop current services
          echo "🛑 Stopping current services..."
          cd $PROJECT_DIR
          if [ -f "docker/docker-compose.prod.yml" ]; then
            docker compose -f docker/docker-compose.prod.yml down || true
          fi

          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker image prune -f || true

          echo "✅ Deployment preparation complete"
          EOF

          chmod +x deploy.sh

      - name: 📤 Upload files to VPS
        run: |
          # Create project directory structure
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /opt/emailight/{docker,nginx,scripts}"

          # Upload deployment script
          scp -o StrictHostKeyChecking=no deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight/scripts/

          # Upload Docker Compose production
          scp -o StrictHostKeyChecking=no docker/docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight/docker/

          # Upload environment file
          scp -o StrictHostKeyChecking=no docker/.env.prod ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight/docker/

          # Upload Nginx configuration
          scp -o StrictHostKeyChecking=no nginx/emailight.conf ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight/nginx/

          # Upload user-service source
          tar -czf user-service.tar.gz -C user-service .
          scp -o StrictHostKeyChecking=no user-service.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight/

          # Upload Dockerfile
          scp -o StrictHostKeyChecking=no user-service/Dockerfile ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/emailight/user-service/

      - name: 🚀 Deploy on VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            
            cd /opt/emailight
            
            # Extract user-service
            echo "📦 Extracting user-service..."
            tar -xzf user-service.tar.gz -C user-service/
            rm user-service.tar.gz
            
            # Run deployment script
            echo "🚀 Running deployment script..."
            ./scripts/deploy.sh
            
            # Start services
            echo "🔄 Starting services..."
            cd docker
            docker compose -f docker-compose.prod.yml up -d --build
            
            # Wait for services to be healthy
            echo "⏳ Waiting for services to be healthy..."
            sleep 30
            
            # Check health
            echo "🏥 Checking service health..."
            if curl -f http://localhost:3001/health > /dev/null 2>&1; then
              echo "✅ User service is healthy"
            else
              echo "❌ User service health check failed"
              docker compose -f docker-compose.prod.yml logs user-service
              exit 1
            fi
            
            # Configure Nginx
            echo "🔧 Configuring Nginx..."
            cp /opt/emailight/nginx/emailight.conf /etc/nginx/sites-available/
            ln -sf /etc/nginx/sites-available/emailight.conf /etc/nginx/sites-enabled/
            nginx -t && systemctl reload nginx
            
            echo "🎉 Deployment completed successfully!"
            echo "🌐 Application available at: https://${{ secrets.DOMAIN }}"
            echo "📊 Health check: https://${{ secrets.DOMAIN }}/health"
            echo "📚 API docs: https://${{ secrets.DOMAIN }}/docs"
          EOF

      - name: 🏥 Health Check
        run: |
          echo "⏳ Waiting for deployment to stabilize..."
          sleep 10

          echo "🏥 Running health checks..."

          # Check main health endpoint
          if curl -f -s "https://${{ secrets.DOMAIN }}/health" > /dev/null; then
            echo "✅ Main health check passed"
          else
            echo "❌ Main health check failed"
            exit 1
          fi

          # Check API endpoint
          if curl -f -s "https://${{ secrets.DOMAIN }}/api/v1/auth/profile" -H "Authorization: Bearer invalid" | grep -q "401\|403"; then
            echo "✅ API endpoint responding correctly"
          else
            echo "❌ API endpoint check failed"
            exit 1
          fi

          echo "🎉 All health checks passed!"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Domain**: https://${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Check](https://${{ secrets.DOMAIN }}/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [API Documentation](https://${{ secrets.DOMAIN }}/docs)" >> $GITHUB_STEP_SUMMARY
          echo "- [Exceptionless Monitoring](https://${{ secrets.DOMAIN }}:5000)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Useful Commands" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "# Check service status" >> $GITHUB_STEP_SUMMARY
          echo "ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cd /opt/emailight/docker && docker compose -f docker-compose.prod.yml ps'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View logs" >> $GITHUB_STEP_SUMMARY
          echo "ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cd /opt/emailight/docker && docker compose -f docker-compose.prod.yml logs -f user-service'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Restart services" >> $GITHUB_STEP_SUMMARY
          echo "ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cd /opt/emailight/docker && docker compose -f docker-compose.prod.yml restart'" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
